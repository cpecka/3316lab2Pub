{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Square","value","onClick","Button","className","ConnectFourBoard","useState","Array","fill","squares","setSquare","isYellowTurn","setYellowTurn","winner","winningSets","i","length","a","b","c","d","calculateWinner","renderSquare","getWinner","input","tempSquares","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0115e50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reactDom from 'react-dom';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nfunction Square({value, onClick}){ //Square will be the buttons on the site\n  return (\n    //value is the value that is displayed in the button. It is updated by the OnClick method and the deafult valye is null\n      <Button className =\"square\" onClick={onClick} >\n                {value}  \n      </Button>\n      \n  )\n  }\nfunction ConnectFourBoard ()//this is the acctual board for the game. It holds all the buttons/squares\n  {\n    const[squares, setSquare] = useState(Array(42).fill(null)); //initalizes the array of buttons\n    const [isYellowTurn, setYellowTurn] = useState(true); //Yellow is player one (places X) and although there is no mention of Red player in this code, they are player two (places O)\n    const winner = calculateWinner(squares);// winner is either X or O \n\n    return(\n      <div>\n        <div> {/* Each of these div's contains a row of 7 renderSquares. There are 6 div's total */}\n        {renderSquare(0)}\n        {renderSquare(1)}        \n        {renderSquare(2)}\n        {renderSquare(3)}        \n        {renderSquare(4)}        \n        {renderSquare(5)}        \n        {renderSquare(6)}\n      </div>\n      <div>\n        {renderSquare(7)}\n        {renderSquare(8)}        \n        {renderSquare(9)}\n        {renderSquare(10)}        \n        {renderSquare(11)}        \n        {renderSquare(12)}        \n        {renderSquare(13)}\n      </div>\n      <div>\n        {renderSquare(14)}\n        {renderSquare(15)}        \n        {renderSquare(16)}\n        {renderSquare(17)}        \n        {renderSquare(18)}        \n        {renderSquare(19)}        \n        {renderSquare(20)}\n      </div>\n      <div>\n        {renderSquare(21)}\n        {renderSquare(22)}        \n        {renderSquare(23)}\n        {renderSquare(24)}        \n        {renderSquare(25)}        \n        {renderSquare(26)}        \n        {renderSquare(27)}\n      </div>\n      <div>\n        {renderSquare(28)}\n        {renderSquare(29)}        \n        {renderSquare(30)}\n        {renderSquare(31)}        \n        {renderSquare(32)}        \n        {renderSquare(33)}        \n        {renderSquare(34)}\n      </div>\n      <div>\n        {renderSquare(35)}\n        {renderSquare(36)}        \n        {renderSquare(37)}\n        {renderSquare(38)}        \n        {renderSquare(39)}        \n        {renderSquare(40)}        \n        {renderSquare(41)}\n      </div>\n    <div>{getWinner()}</div>\n      </div>\n    )\n    function renderSquare(input) { //Each renderSquare is responisblie for displaying 1 button and contolling the value shown in it.\n      return(\n        <Square value = {squares[input]} onClick={() =>{\n          const tempSquares = squares.slice();\n          if(tempSquares[input]===null && winner === null){ //checks if the button has not already been selected and if the game is still going\n            tempSquares[input]= isYellowTurn? \"X\" : \"O\"; //checks who's turn it is and assgins the appropriate value to the button\n          setSquare(tempSquares);// updates the displayed array of buttons\n          setYellowTurn(!isYellowTurn); // updates who's turn it is\n          }\n        }}/>\n      )\n  }\n\n  function getWinner(){ // this function checks if a player has won the game and if they have it displays the winner\n    if(winner) {\n      return winner + \" Won!\"\n    }\n  }\n\n  }\n\n  \n\nReactDOM.render(\n  <ConnectFourBoard/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) { \n  const winningSets = [ // this is an array of all possible winning square combinations\n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    [6,13,20,27],[13,20,27,34],[20,27,34,41]\n  ];\n\n  for (let i = 0; i < winningSets.length; i++){ // loops through all possible winning combinations\n    const [a, b, c, d] = winningSets[i];\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]){ // checks if a given combination has been achieved\n      return squares[a]; // returns X or O depending on who has gotten the winning combination\n    }\n  }\n  return null;\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
[{"/Users/colinpecka/se3316-lab2/src/index.js":"1","/Users/colinpecka/se3316-lab2/src/App.js":"2","/Users/colinpecka/se3316-lab2/src/reportWebVitals.js":"3","/Users/colinpecka/Documents/GitHub/lab2-cpecka/src/index.js":"4","/Users/colinpecka/Documents/GitHub/lab2-cpecka/src/App.js":"5","/Users/colinpecka/Documents/GitHub/lab2-cpecka/src/reportWebVitals.js":"6","/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/index.js":"7","/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/App.js":"8","/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/reportWebVitals.js":"9"},{"size":500,"mtime":1634666795526,"results":"10","hashOfConfig":"11"},{"size":528,"mtime":1634666795521,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1634666795528,"results":"13","hashOfConfig":"11"},{"size":5118,"mtime":1635799486805,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1634666795521,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1634666795528,"results":"17","hashOfConfig":"15"},{"size":5118,"mtime":1635799486805,"results":"18","hashOfConfig":"19"},{"size":528,"mtime":1634666795521,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1634666795528,"results":"21","hashOfConfig":"19"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sh02dm",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"l86f2z",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"1vp1myl",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/colinpecka/se3316-lab2/src/index.js",[],"/Users/colinpecka/se3316-lab2/src/App.js",[],"/Users/colinpecka/se3316-lab2/src/reportWebVitals.js",[],"/Users/colinpecka/Documents/GitHub/lab2-cpecka/src/index.js",["41","42","43"],"/Users/colinpecka/Documents/GitHub/lab2-cpecka/src/App.js",[],"/Users/colinpecka/Documents/GitHub/lab2-cpecka/src/reportWebVitals.js",[],"/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/index.js",["44","45","46"],"import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reactDom from 'react-dom';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nfunction Square({value, onClick}){ //Square will be the buttons on the site\n  return (\n    //value is the value that is displayed in the button. It is updated by the OnClick method and the deafult valye is null\n      <Button className =\"square\" onClick={onClick} >\n                {value}  \n      </Button>\n      \n  )\n  }\nfunction ConnectFourBoard ()//this is the acctual board for the game. It holds all the buttons/squares\n  {\n    const[squares, setSquare] = useState(Array(42).fill(null)); //initalizes the array of buttons\n    const [isYellowTurn, setYellowTurn] = useState(true); //Yellow is player one (places X) and although there is no mention of Red player in this code, they are player two (places O)\n    const winner = calculateWinner(squares);// winner is either X or O \n\n    return(\n      <div>\n        <div> {/* Each of these div's contains a row of 7 renderSquares. There are 6 div's total */}\n        {renderSquare(0)}\n        {renderSquare(1)}        \n        {renderSquare(2)}\n        {renderSquare(3)}        \n        {renderSquare(4)}        \n        {renderSquare(5)}        \n        {renderSquare(6)}\n      </div>\n      <div>\n        {renderSquare(7)}\n        {renderSquare(8)}        \n        {renderSquare(9)}\n        {renderSquare(10)}        \n        {renderSquare(11)}        \n        {renderSquare(12)}        \n        {renderSquare(13)}\n      </div>\n      <div>\n        {renderSquare(14)}\n        {renderSquare(15)}        \n        {renderSquare(16)}\n        {renderSquare(17)}        \n        {renderSquare(18)}        \n        {renderSquare(19)}        \n        {renderSquare(20)}\n      </div>\n      <div>\n        {renderSquare(21)}\n        {renderSquare(22)}        \n        {renderSquare(23)}\n        {renderSquare(24)}        \n        {renderSquare(25)}        \n        {renderSquare(26)}        \n        {renderSquare(27)}\n      </div>\n      <div>\n        {renderSquare(28)}\n        {renderSquare(29)}        \n        {renderSquare(30)}\n        {renderSquare(31)}        \n        {renderSquare(32)}        \n        {renderSquare(33)}        \n        {renderSquare(34)}\n      </div>\n      <div>\n        {renderSquare(35)}\n        {renderSquare(36)}        \n        {renderSquare(37)}\n        {renderSquare(38)}        \n        {renderSquare(39)}        \n        {renderSquare(40)}        \n        {renderSquare(41)}\n      </div>\n    <div>{getWinner()}</div>\n      </div>\n    )\n    function renderSquare(input) { //Each renderSquare is responisblie for displaying 1 button and contolling the value shown in it.\n      return(\n        <Square value = {squares[input]} onClick={() =>{\n          const tempSquares = squares.slice();\n          if(tempSquares[input]===null && winner === null){ //checks if the button has not already been selected and if the game is still going\n            tempSquares[input]= isYellowTurn? \"X\" : \"O\"; //checks who's turn it is and assgins the appropriate value to the button\n          setSquare(tempSquares);// updates the displayed array of buttons\n          setYellowTurn(!isYellowTurn); // updates who's turn it is\n          }\n        }}/>\n      )\n  }\n\n  function getWinner(){ // this function checks if a player has won the game and if they have it displays the winner\n    if(winner) {\n      return winner + \" Won!\"\n    }\n  }\n\n  }\n\n  \n\nReactDOM.render(\n  <ConnectFourBoard/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) { \n  const winningSets = [ // this is an array of all possible winning square combinations\n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    [6,13,20,27],[13,20,27,34],[20,27,34,41]\n  ];\n\n  for (let i = 0; i < winningSets.length; i++){ // loops through all possible winning combinations\n    const [a, b, c, d] = winningSets[i];\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]){ // checks if a given combination has been achieved\n      return squares[a]; // returns X or O depending on who has gotten the winning combination\n    }\n  }\n  return null;\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/App.js",[],"/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/reportWebVitals.js",[],{"ruleId":"47","severity":1,"message":"48","line":1,"column":16,"nodeType":"49","messageId":"50","endLine":1,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":11},{"ruleId":"47","severity":1,"message":"52","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":1,"column":16,"nodeType":"49","messageId":"50","endLine":1,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":11},{"ruleId":"47","severity":1,"message":"52","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'App' is defined but never used.","'reactDom' is defined but never used."]
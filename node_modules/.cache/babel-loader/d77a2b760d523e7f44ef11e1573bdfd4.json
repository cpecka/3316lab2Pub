{"ast":null,"code":"import _slicedToArray from\"/Users/colinpecka/Documents/GitHub/3316lab2Pub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import ReactDOM from'react-dom';import'./index.css';import App from'./App';import reportWebVitals from'./reportWebVitals';import reactDom from'react-dom';import{Button}from'reactstrap';import'bootstrap/dist/css/bootstrap.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Square(_ref){var value=_ref.value,onClick=_ref.onClick;//Square will be the buttons on the site\nreturn/*#__PURE__*/ (//value is the value that is displayed in the button. It is updated by the OnClick method and the deafult valye is null\n_jsx(Button,{className:\"square\",onClick:onClick,children:value}));}function ConnectFourBoard()//this is the acctual board for the game. It holds all the buttons/squares\n{var _useState=useState(Array(42).fill(null)),_useState2=_slicedToArray(_useState,2),squares=_useState2[0],setSquare=_useState2[1];//initalizes the array of buttons\nvar _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isYellowTurn=_useState4[0],setYellowTurn=_useState4[1];//Yellow is player one (places X) and although there is no mention of Red player in this code, they are player two (places O)\nvar winner=calculateWinner(squares);// winner is either X or O \nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\" \",renderSquare(0),renderSquare(1),renderSquare(2),renderSquare(3),renderSquare(4),renderSquare(5),renderSquare(6)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderSquare(7),renderSquare(8),renderSquare(9),renderSquare(10),renderSquare(11),renderSquare(12),renderSquare(13)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderSquare(14),renderSquare(15),renderSquare(16),renderSquare(17),renderSquare(18),renderSquare(19),renderSquare(20)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderSquare(21),renderSquare(22),renderSquare(23),renderSquare(24),renderSquare(25),renderSquare(26),renderSquare(27)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderSquare(28),renderSquare(29),renderSquare(30),renderSquare(31),renderSquare(32),renderSquare(33),renderSquare(34)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderSquare(35),renderSquare(36),renderSquare(37),renderSquare(38),renderSquare(39),renderSquare(40),renderSquare(41)]}),/*#__PURE__*/_jsx(\"div\",{children:getWinner()})]});function renderSquare(input){//Each renderSquare is responisblie for displaying 1 button and contolling the value shown in it.\nreturn/*#__PURE__*/_jsx(Square,{value:squares[input],onClick:function onClick(){var tempSquares=squares.slice();if(tempSquares[input]===null&&winner===null){//checks if the button has not already been selected and if the game is still going\ntempSquares[input]=isYellowTurn?\"X\":\"O\";//checks who's turn it is and assgins the appropriate value to the button\nsetSquare(tempSquares);// updates the displayed array of buttons\nsetYellowTurn(!isYellowTurn);// updates who's turn it is\n}}});}function getWinner(){// this function checks if a player has won the game and if they have it displays the winner\nif(winner){return winner+\" Won!\";}}}ReactDOM.render(/*#__PURE__*/_jsx(ConnectFourBoard,{}),document.getElementById('root'));function calculateWinner(squares){var winningSets=[// this is an array of all possible winning square combinations\n[0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],[7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],[14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],[21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],[28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],[35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],[0,7,14,21],[7,14,21,28],[14,21,28,35],[1,8,15,22],[8,15,22,29],[15,22,29,36],[2,9,16,23],[9,16,23,30],[16,23,30,37],[3,10,17,24],[10,17,24,31],[17,24,31,38],[4,11,18,25],[11,18,25,32],[18,25,32,39],[5,12,19,26],[12,19,26,33],[19,26,33,40],[6,13,20,27],[13,20,27,34],[20,27,34,41]];for(var i=0;i<winningSets.length;i++){// loops through all possible winning combinations\nvar _winningSets$i=_slicedToArray(winningSets[i],4),a=_winningSets$i[0],b=_winningSets$i[1],c=_winningSets$i[2],d=_winningSets$i[3];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]&&squares[a]===squares[d]){// checks if a given combination has been achieved\nreturn squares[a];// returns X or O depending on who has gotten the winning combination\n}}return null;}// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"sources":["/Users/colinpecka/Documents/GitHub/3316lab2Pub/src/index.js"],"names":["React","useEffect","useState","ReactDOM","App","reportWebVitals","reactDom","Button","Square","value","onClick","ConnectFourBoard","Array","fill","squares","setSquare","isYellowTurn","setYellowTurn","winner","calculateWinner","renderSquare","getWinner","input","tempSquares","slice","render","document","getElementById","winningSets","i","length","a","b","c","d"],"mappings":"qKAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAASC,MAAT,KAAuB,YAAvB,CACA,MAAO,kCAAP,C,wFAGA,QAASC,CAAAA,MAAT,MAAiC,IAAhBC,CAAAA,KAAgB,MAAhBA,KAAgB,CAATC,OAAS,MAATA,OAAS,CAAE;AACjC,oBACE;AACE,KAAC,MAAD,EAAQ,SAAS,CAAE,QAAnB,CAA4B,OAAO,CAAEA,OAArC,UACWD,KADX,EAFJ,EAOC,CACH,QAASE,CAAAA,gBAAT,EAA4B;AAC1B,CACE,cAA4BT,QAAQ,CAACU,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,IAAf,CAAD,CAApC,wCAAMC,OAAN,eAAeC,SAAf,eAA4D;AAC5D,eAAsCb,QAAQ,CAAC,IAAD,CAA9C,yCAAOc,YAAP,eAAqBC,aAArB,eAAsD;AACtD,GAAMC,CAAAA,MAAM,CAAGC,eAAe,CAACL,OAAD,CAA9B,CAAwC;AAExC,mBACE,oCACE,2BACCM,YAAY,CAAC,CAAD,CADb,CAECA,YAAY,CAAC,CAAD,CAFb,CAGCA,YAAY,CAAC,CAAD,CAHb,CAICA,YAAY,CAAC,CAAD,CAJb,CAKCA,YAAY,CAAC,CAAD,CALb,CAMCA,YAAY,CAAC,CAAD,CANb,CAOCA,YAAY,CAAC,CAAD,CAPb,GADF,cAUA,uBACGA,YAAY,CAAC,CAAD,CADf,CAEGA,YAAY,CAAC,CAAD,CAFf,CAGGA,YAAY,CAAC,CAAD,CAHf,CAIGA,YAAY,CAAC,EAAD,CAJf,CAKGA,YAAY,CAAC,EAAD,CALf,CAMGA,YAAY,CAAC,EAAD,CANf,CAOGA,YAAY,CAAC,EAAD,CAPf,GAVA,cAmBA,uBACGA,YAAY,CAAC,EAAD,CADf,CAEGA,YAAY,CAAC,EAAD,CAFf,CAGGA,YAAY,CAAC,EAAD,CAHf,CAIGA,YAAY,CAAC,EAAD,CAJf,CAKGA,YAAY,CAAC,EAAD,CALf,CAMGA,YAAY,CAAC,EAAD,CANf,CAOGA,YAAY,CAAC,EAAD,CAPf,GAnBA,cA4BA,uBACGA,YAAY,CAAC,EAAD,CADf,CAEGA,YAAY,CAAC,EAAD,CAFf,CAGGA,YAAY,CAAC,EAAD,CAHf,CAIGA,YAAY,CAAC,EAAD,CAJf,CAKGA,YAAY,CAAC,EAAD,CALf,CAMGA,YAAY,CAAC,EAAD,CANf,CAOGA,YAAY,CAAC,EAAD,CAPf,GA5BA,cAqCA,uBACGA,YAAY,CAAC,EAAD,CADf,CAEGA,YAAY,CAAC,EAAD,CAFf,CAGGA,YAAY,CAAC,EAAD,CAHf,CAIGA,YAAY,CAAC,EAAD,CAJf,CAKGA,YAAY,CAAC,EAAD,CALf,CAMGA,YAAY,CAAC,EAAD,CANf,CAOGA,YAAY,CAAC,EAAD,CAPf,GArCA,cA8CA,uBACGA,YAAY,CAAC,EAAD,CADf,CAEGA,YAAY,CAAC,EAAD,CAFf,CAGGA,YAAY,CAAC,EAAD,CAHf,CAIGA,YAAY,CAAC,EAAD,CAJf,CAKGA,YAAY,CAAC,EAAD,CALf,CAMGA,YAAY,CAAC,EAAD,CANf,CAOGA,YAAY,CAAC,EAAD,CAPf,GA9CA,cAuDF,qBAAMC,SAAS,EAAf,EAvDE,GADF,CA2DA,QAASD,CAAAA,YAAT,CAAsBE,KAAtB,CAA6B,CAAE;AAC7B,mBACE,KAAC,MAAD,EAAQ,KAAK,CAAIR,OAAO,CAACQ,KAAD,CAAxB,CAAiC,OAAO,CAAE,kBAAK,CAC7C,GAAMC,CAAAA,WAAW,CAAGT,OAAO,CAACU,KAAR,EAApB,CACA,GAAGD,WAAW,CAACD,KAAD,CAAX,GAAqB,IAArB,EAA6BJ,MAAM,GAAK,IAA3C,CAAgD,CAAE;AAChDK,WAAW,CAACD,KAAD,CAAX,CAAoBN,YAAY,CAAE,GAAF,CAAQ,GAAxC,CAA6C;AAC/CD,SAAS,CAACQ,WAAD,CAAT,CAAuB;AACvBN,aAAa,CAAC,CAACD,YAAF,CAAb,CAA8B;AAC7B,CACF,CAPD,EADF,CAUH,CAED,QAASK,CAAAA,SAAT,EAAoB,CAAE;AACpB,GAAGH,MAAH,CAAW,CACT,MAAOA,CAAAA,MAAM,CAAG,OAAhB,CACD,CACF,CAEA,CAIHf,QAAQ,CAACsB,MAAT,cACE,KAAC,gBAAD,IADF,CAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,EAKA,QAASR,CAAAA,eAAT,CAAyBL,OAAzB,CAAkC,CAChC,GAAMc,CAAAA,WAAW,CAAG,CAAE;AACpB,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CADkB,CACR,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CADQ,CACE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CADF,CACY,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CADZ,CAElB,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAFkB,CAEP,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAFO,CAEK,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAFL,CAEkB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAFlB,CAGlB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAHkB,CAGJ,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAHI,CAGU,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAHV,CAGwB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAHxB,CAIlB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAJkB,CAIJ,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAJI,CAIU,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAJV,CAIwB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAJxB,CAKlB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CALkB,CAKJ,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CALI,CAKU,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CALV,CAKwB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CALxB,CAMlB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CANkB,CAMJ,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CANI,CAMU,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CANV,CAMwB,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CANxB,CAOlB,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAPkB,CAON,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAPM,CAOO,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAPP,CAQlB,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CARkB,CAQN,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CARM,CAQO,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CARP,CASlB,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CATkB,CASN,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CATM,CASO,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CATP,CAUlB,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAVkB,CAUL,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAVK,CAUS,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAVT,CAWlB,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAXkB,CAWL,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAXK,CAWS,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAXT,CAYlB,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAZkB,CAYL,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAZK,CAYS,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAZT,CAalB,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAbkB,CAaL,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAbK,CAaS,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAbT,CAApB,CAgBA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,WAAW,CAACE,MAAhC,CAAwCD,CAAC,EAAzC,CAA4C,CAAE;AAC5C,kCAAqBD,WAAW,CAACC,CAAD,CAAhC,IAAOE,CAAP,mBAAUC,CAAV,mBAAaC,CAAb,mBAAgBC,CAAhB,mBACA,GAAGpB,OAAO,CAACiB,CAAD,CAAP,EAAcjB,OAAO,CAACiB,CAAD,CAAP,GAAejB,OAAO,CAACkB,CAAD,CAApC,EAA2ClB,OAAO,CAACiB,CAAD,CAAP,GAAejB,OAAO,CAACmB,CAAD,CAAjE,EAAwEnB,OAAO,CAACiB,CAAD,CAAP,GAAejB,OAAO,CAACoB,CAAD,CAAjG,CAAqG,CAAE;AACrG,MAAOpB,CAAAA,OAAO,CAACiB,CAAD,CAAd,CAAmB;AACpB,CACF,CACD,MAAO,KAAP,CACD,CAED;AACA;AACA;AACA1B,eAAe","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reactDom from 'react-dom';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nfunction Square({value, onClick}){ //Square will be the buttons on the site\n  return (\n    //value is the value that is displayed in the button. It is updated by the OnClick method and the deafult valye is null\n      <Button className =\"square\" onClick={onClick} >\n                {value}  \n      </Button>\n      \n  )\n  }\nfunction ConnectFourBoard ()//this is the acctual board for the game. It holds all the buttons/squares\n  {\n    const[squares, setSquare] = useState(Array(42).fill(null)); //initalizes the array of buttons\n    const [isYellowTurn, setYellowTurn] = useState(true); //Yellow is player one (places X) and although there is no mention of Red player in this code, they are player two (places O)\n    const winner = calculateWinner(squares);// winner is either X or O \n\n    return(\n      <div>\n        <div> {/* Each of these div's contains a row of 7 renderSquares. There are 6 div's total */}\n        {renderSquare(0)}\n        {renderSquare(1)}        \n        {renderSquare(2)}\n        {renderSquare(3)}        \n        {renderSquare(4)}        \n        {renderSquare(5)}        \n        {renderSquare(6)}\n      </div>\n      <div>\n        {renderSquare(7)}\n        {renderSquare(8)}        \n        {renderSquare(9)}\n        {renderSquare(10)}        \n        {renderSquare(11)}        \n        {renderSquare(12)}        \n        {renderSquare(13)}\n      </div>\n      <div>\n        {renderSquare(14)}\n        {renderSquare(15)}        \n        {renderSquare(16)}\n        {renderSquare(17)}        \n        {renderSquare(18)}        \n        {renderSquare(19)}        \n        {renderSquare(20)}\n      </div>\n      <div>\n        {renderSquare(21)}\n        {renderSquare(22)}        \n        {renderSquare(23)}\n        {renderSquare(24)}        \n        {renderSquare(25)}        \n        {renderSquare(26)}        \n        {renderSquare(27)}\n      </div>\n      <div>\n        {renderSquare(28)}\n        {renderSquare(29)}        \n        {renderSquare(30)}\n        {renderSquare(31)}        \n        {renderSquare(32)}        \n        {renderSquare(33)}        \n        {renderSquare(34)}\n      </div>\n      <div>\n        {renderSquare(35)}\n        {renderSquare(36)}        \n        {renderSquare(37)}\n        {renderSquare(38)}        \n        {renderSquare(39)}        \n        {renderSquare(40)}        \n        {renderSquare(41)}\n      </div>\n    <div>{getWinner()}</div>\n      </div>\n    )\n    function renderSquare(input) { //Each renderSquare is responisblie for displaying 1 button and contolling the value shown in it.\n      return(\n        <Square value = {squares[input]} onClick={() =>{\n          const tempSquares = squares.slice();\n          if(tempSquares[input]===null && winner === null){ //checks if the button has not already been selected and if the game is still going\n            tempSquares[input]= isYellowTurn? \"X\" : \"O\"; //checks who's turn it is and assgins the appropriate value to the button\n          setSquare(tempSquares);// updates the displayed array of buttons\n          setYellowTurn(!isYellowTurn); // updates who's turn it is\n          }\n        }}/>\n      )\n  }\n\n  function getWinner(){ // this function checks if a player has won the game and if they have it displays the winner\n    if(winner) {\n      return winner + \" Won!\"\n    }\n  }\n\n  }\n\n  \n\nReactDOM.render(\n  <ConnectFourBoard/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) { \n  const winningSets = [ // this is an array of all possible winning square combinations\n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    [6,13,20,27],[13,20,27,34],[20,27,34,41]\n  ];\n\n  for (let i = 0; i < winningSets.length; i++){ // loops through all possible winning combinations\n    const [a, b, c, d] = winningSets[i];\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]){ // checks if a given combination has been achieved\n      return squares[a]; // returns X or O depending on who has gotten the winning combination\n    }\n  }\n  return null;\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}